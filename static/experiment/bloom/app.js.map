{"version":3,"sources":["src/sketch.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import * as p5 from \"p5\";\nimport \"p5/lib/addons/p5.sound\";\nimport \"p5/lib/addons/p5.dom\";\n\ndocument.body.style.overflow = \"hidden\";\n\ninterface Dot {\n  x: number;\n  y: number;\n  size: number;\n  sizeMax: number;\n  sizeMin: number;\n}\n\ninterface DotGrid {\n  x: number;\n  y: number;\n  rows: number;\n  cols: number;\n  dots: Dot[];\n}\n\nconst INITIAL_SIZE = 10;\nconst INITIAL_GAP = 10;\n\nvar sketch = function (p: p5) {\n  let ding: p5.SoundFile;\n\n  let dots: DotGrid;\n  let sizeSlider = p.createSlider(0, 1, 0.5, 0.01);\n  let sizeSliderValue;\n\n  let scaleSlider = p.createSlider(1, 5, 2, 0.01);\n  let scaleSliderValue;\n\n  p.preload = () => {\n    const DING_FILE = require(\"./ding.mp3\").default;\n    ding = new p5.SoundFile(DING_FILE);\n  };\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    ding.playMode(\"restart\");\n    p.smooth();\n\n    dots = createDotGrid(4, 4, 10, 20);\n  };\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    // generate grid again when window resize to center it\n    dots = createDotGrid(4, 4, 10, 20);\n  };\n\n  function createDotGrid(\n    cols: number,\n    rows: number,\n    dotSize = 5,\n    gap = 5,\n    maxScale = 4\n  ): DotGrid {\n    const minSize = dotSize;\n    const maxSize = dotSize * maxScale;\n\n    const gridOffsetX = (cols * (minSize + gap)) / 2;\n    const gridOffsetY = (rows * (minSize + gap)) / 2;\n\n    let dotGrid: DotGrid = {\n      cols,\n      rows,\n      dots: [],\n      x: p.width / 2 - gridOffsetX,\n      y: p.height / 2 - gridOffsetY,\n    };\n\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        dotGrid.dots.push({\n          x: dotGrid.x + i * (dotSize + gap),\n          y: dotGrid.y + j * (dotSize + gap),\n          sizeMax: maxSize,\n          sizeMin: minSize,\n          size: dotSize,\n        });\n      }\n    }\n\n    return dotGrid;\n  }\n\n  function drawDotGrid(dotGrid: DotGrid) {\n    // setup colours\n    p.fill(100);\n    p.strokeWeight(0);\n    p.ellipseMode(p.CENTER);\n    dotGrid.dots.forEach((dot) => {\n      p.ellipse(dot.x, dot.y, dot.size, dot.size);\n    });\n  }\n\n  function updateDotGrid(dotGrid: DotGrid) {\n    const maxDist = 200;\n    dotGrid.dots.forEach((dot) => {\n      // scale base on mouse pos\n      const mouseDist = p.dist(dot.x, dot.y, p.mouseX, p.mouseY);\n      const mappedSize = p.map(\n        mouseDist / maxDist,\n        1,\n        0,\n        dot.sizeMin,\n        dot.sizeMax\n      );\n      dot.size = p.constrain(mappedSize, dot.sizeMin, dot.sizeMax);\n    });\n  }\n\n  function updateSliderValue() {\n    if (\n      sizeSliderValue !== sizeSlider.value() ||\n      scaleSliderValue !== scaleSlider.value()\n    ) {\n      sizeSliderValue = sizeSlider.value();\n      scaleSliderValue = scaleSlider.value();\n      // create the new dot grid here\n      dots = createDotGrid(\n        4,\n        4,\n        INITIAL_SIZE * Number(sizeSliderValue),\n        INITIAL_GAP,\n        Number(scaleSliderValue)\n      );\n    }\n  }\n\n  p.draw = function () {\n    updateSliderValue();\n    // p.ellipse(p.mouseX, p.mouseY, 80, 80);\n    p.clear();\n    updateDotGrid(dots);\n    drawDotGrid(dots);\n  };\n};\n\nnew p5(sketch);\n"]}