{"version":3,"sources":["src/sketch.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import * as p5 from \"p5\";\nimport { Vector } from \"p5\";\n\nimport \"./style.css\";\n// import \"p5/lib/addons/p5.sound\";\n\nlet sketch = function (p: p5) {\n  type Worm = {\n    pos: Vector;\n    vel: Vector;\n    accel: Vector;\n    joints: Vector[];\n    index: number;\n  };\n\n  const WORM_JOINT_COUNT = 4;\n  const WORM_JOINT_DIST = 10;\n  const WORM_COUNT = 40;\n\n  const DELAY_FACTOR = 0.02;\n\n  let wormList: Worm[] = generateWorms();\n\n  p.setup = function () {\n    // setup\n    p.createCanvas(\n      document.body.clientWidth,\n      document.body.clientHeight,\n      p.WEBGL\n    );\n    p.rectMode(p.CENTER);\n  };\n\n  p.draw = function () {\n    p.clear();\n    p.background(0);\n    p.noStroke();\n\n    updateWorms(wormList);\n\n    // translate the origin coord to browser's top left\n    p.translate(-p.width / 2, -p.height / 2);\n    // render the worms\n    drawWorms(wormList);\n  };\n  /*\n   *\n   * Worm generation\n   *\n   */\n\n  function generateWorms() {\n    const worms: Worm[] = [];\n    for (let i = 0; i < WORM_COUNT; i++) {\n      worms[i] = {\n        pos: p.createVector(0, 0, 0),\n        vel: p.createVector(0, 0, 0),\n        accel: p.createVector(0, 0, 0),\n        joints: createInitialWormJoints(WORM_JOINT_COUNT, WORM_JOINT_DIST),\n        index: i,\n      };\n    }\n    return worms;\n  }\n\n  function createInitialWormJoints(jointLength: number, jointDist: number) {\n    let wormJoints: Vector[] = [];\n    for (let i = 0; i < jointLength; i++) {\n      wormJoints[i] = p.createVector(i * jointDist, 0);\n    }\n    return wormJoints;\n  }\n\n  /*\n   *\n   * Worm LOGIC\n   *\n   */\n  function updateWormLogic(worm: Worm) {\n    const mouseVec: Vector = p.createVector(p.mouseX, p.mouseY);\n    const mouseWormDistVec = mouseVec.sub(worm.pos);\n    const mouseMovementProjectionOffset = mouseWormDistVec.copy().mult(0.6);\n    worm.vel.set(\n      mouseWormDistVec\n        .add(mouseMovementProjectionOffset)\n        .mult(DELAY_FACTOR * (worm.index + 1))\n    );\n\n    // update the joints\n    updateWormJoints(worm);\n  }\n\n  function updateWormJoints(worm: Worm) {\n    // the frist entry always the head position\n    worm.joints[0] = worm.pos.copy();\n\n    // let let the second joint update position when the first joint (the leading joint)\n    // is too far away\n    // if (worm.joints[1].dist(worm.joints[0]) > WORM_JOINT_DIST) {\n    worm.joints[1] = followJoint(worm.joints[0], worm.joints[1]);\n\n    for (let i = 1; i < worm.joints.length; i++) {\n      worm.joints[i] = followJoint(worm.joints[i - 1], worm.joints[i]);\n    }\n    // remove joint at the back\n    // worm.joints.pop();\n    // add one joint at the beginning\n    // worm.joints.unshift(followJoint(worm.joints[0], worm.joints[1]));\n    // }\n  }\n  function followJoint(leadingJoint: Vector, followingJoint: Vector) {\n    return leadingJoint.copy().add(followingJoint).div(2);\n  }\n\n  function interpolateWorm(worm: Worm) {\n    worm.vel.add(worm.accel);\n    worm.pos.add(worm.vel);\n  }\n\n  function updateWorms(worms: Worm[]) {\n    for (let i = 0; i < worms.length; i++) {\n      updateWormLogic(worms[i]);\n    }\n    for (let i = 0; i < worms.length; i++) {\n      interpolateWorm(worms[i]);\n    }\n  }\n\n  /*\n   *\n   * Worm rendering\n   *\n   */\n\n  function drawWorms(worms: Worm[]) {\n    for (let i = 0; i < worms.length; i++) {\n      p.push();\n      drawWorm(worms[i]);\n      p.pop();\n    }\n  }\n  function drawWorm(worm: Worm) {\n    p.noFill();\n    p.strokeWeight(5);\n    p.stroke(255);\n    // draw the worm\n    // the worm will always follow the head point\n\n    p.beginShape();\n    // draw all the joins\n    for (let i = 0; i < worm.joints.length; i++) {\n      // for visualising the points\n      // p.ellipse(worm.joints[i].x, worm.joints[i].y, 5);\n      p.curveVertex(worm.joints[i].x, worm.joints[i].y);\n    }\n    p.endShape();\n  }\n\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  };\n};\n\nnew p5(sketch);\n"]}